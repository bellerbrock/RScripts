descript.results[i,c("SD_LD_cull")] = round(sd(ind.plot.cull$aspectratio/100), digits = 2)
descript.results[i,c("SD_LD_no1")] = round(sd(ind.plot.no1$aspectratio/100), digits = 2)
descript.results[i,c("SD_LD_jumbo")] = round(sd(ind.plot.jumbo$aspectratio/100), digits = 2)
descript.results[i,c("median_LD_all")] = median(ind.plot$aspectratio/100)
descript.results[i,c("median_LD_canner")] = median(ind.plot.canner$aspectratio/100)
descript.results[i,c("median_LD_cull")] = median(ind.plot.cull$aspectratio/100)
descript.results[i,c("median_LD_no1")] = median(ind.plot.no1$aspectratio/100)
descript.results[i,c("median_LD_jumbo")] = median(ind.plot.jumbo$aspectratio/100)
## individual roots
## mean, SD, median of blockiness
descript.results[i,c("mean_blockiness_all")] = round(mean(ind.plot$blockiness), digits = 2)
descript.results[i,c("mean_blockiness_canner")] = round(mean(ind.plot.canner$blockiness), digits = 2)
descript.results[i,c("mean_blockiness_cull")] = round(mean(ind.plot.cull$blockiness), digits = 2)
descript.results[i,c("mean_blockiness_no1")] = round(mean(ind.plot.no1$blockiness), digits = 2)
descript.results[i,c("mean_blockiness_jumbo")] = round(mean(ind.plot.jumbo$blockiness), digits = 2)
descript.results[i,c("SD_blockiness_all")] = round(sd(ind.plot$blockiness), digits = 2)
descript.results[i,c("SD_blockiness_canner")] = round(sd(ind.plot.canner$blockiness), digits = 2)
descript.results[i,c("SD_blockiness_cull")] = round(sd(ind.plot.cull$blockiness), digits = 2)
descript.results[i,c("SD_blockiness_no1")] = round(sd(ind.plot.no1$blockiness), digits = 2)
descript.results[i,c("SD_blockiness_jumbo")] = round(sd(ind.plot.jumbo$blockiness), digits = 2)
descript.results[i,c("median_blockiness_all")] = median(ind.plot$blockiness)
descript.results[i,c("median_blockiness_canner")] = median(ind.plot.canner$blockiness)
descript.results[i,c("median_blockiness_cull")] = median(ind.plot.cull$blockiness)
descript.results[i,c("median_blockiness_no1")] = median(ind.plot.no1$blockiness)
descript.results[i,c("median_blockiness_jumbo")] = median(ind.plot.jumbo$blockiness)
## individual plots
## total weight of individual classes
# descript.results[i,c("weight_all")] = sum(ind.plot$estimatedweight/10)
# descript.results[i,c("weight_canner")] = sum(ind.plot.canner$estimatedweight/10)
descript.results[i,c("weight_cull_no1")] = sum(ind.plot.cull_no1$estimatedweight/10)
# descript.results[i,c("weight_cull")] = sum(ind.plot.cull$estimatedweight/10)
# descript.results[i,c("weight_no1")] = sum(ind.plot.no1$estimatedweight/10)
# descript.results[i,c("weight_no1.18.1_22")] = sum(ind.plot.no1.18.1_22$estimatedweight/10)
# descript.results[i,c("weight_no1.14.1_18")] = sum(ind.plot.no1.14.1_18$estimatedweight/10)
# descript.results[i,c("weight_no1.9.5_14")] = sum(ind.plot.no1.9.5_14$estimatedweight/10)
# descript.results[i,c("weight_no1.5_9.4")] = sum(ind.plot.no1.5_9.4$estimatedweight/10)
# descript.results[i,c("weight_jumbo")] = sum(ind.plot.jumbo$estimatedweight/10)
descript.results[i,c("weight_jumbo_22_27")] = sum(ind.plot.jumbo.22_27$estimatedweight/10)
descript.results[i,c("weight_jumbo_27more")] = sum(ind.plot.jumbo.27more$estimatedweight/10)
# Marketwt = sum(ind.plot$estimatedweight/10) - sum(ind.plot.cull$estimatedweight/10)
# descript.results[i,c("weight_market")] = Marketwt
descript.results[i,c("weight_no1.jumbo")] = sum(ind.plot.no1.jumbo$estimatedweight/10)
## weight percentage of individual classes to overall
descript.results[i,c("percent_wt_canner")] = round(sum(ind.plot.canner$estimatedweight)/sum(ind.plot$estimatedweight) *100, digits = 0)
descript.results[i,c("percent_wt_cull_no1")] = round(sum(ind.plot.cull_no1$estimatedweight)/sum(ind.plot$estimatedweight)*100, digits = 0)
descript.results[i,c("percent_wt_no1")] = round(sum(ind.plot.no1$estimatedweight)/sum(ind.plot$estimatedweight)*100, digits = 0)
descript.results[i,c("percent_wt_no1.18.1_22")] = round(sum(ind.plot.no1.18.1_22$estimatedweight)/sum(ind.plot$estimatedweight)*100, digits = 0)
descript.results[i,c("percent_wt_no1.14.1_18")] = round(sum(ind.plot.no1.14.1_18$estimatedweight)/sum(ind.plot$estimatedweight)*100, digits = 0)
descript.results[i,c("percent_wt_no1.9.5_14")] = round(sum(ind.plot.no1.9.5_14$estimatedweight)/sum(ind.plot$estimatedweight)*100, digits = 0)
descript.results[i,c("percent_wt_no1.5_9.4")] = round(sum(ind.plot.no1.5_9.4$estimatedweight)/sum(ind.plot$estimatedweight)*100, digits = 0)
descript.results[i,c("percent_wt_cull")] = round(sum(ind.plot.cull$estimatedweight)/sum(ind.plot$estimatedweight)*100, digits = 0)
descript.results[i,c("percent_wt_jumbo")] = round(sum(ind.plot.jumbo$estimatedweight)/sum(ind.plot$estimatedweight)*100, digits = 0)
descript.results[i,c("percent_wt_jumbo_22_27")] = round(sum(ind.plot.jumbo.22_27$estimatedweight)/sum(ind.plot$estimatedweight)*100, digits = 0)
descript.results[i,c("percent_wt_jumbo_27more")] = round(sum(ind.plot.jumbo.27more$estimatedweight)/sum(ind.plot$estimatedweight)*100, digits = 0)
## weight percentage of individual classes to marketable weight
descript.results[i,c("percent_Marketwt_canner")] = round(sum(ind.plot.canner$estimatedweight)/(sum(ind.plot$estimatedweight) - sum(ind.plot.cull$estimatedweight))*100, digits = 0)
descript.results[i,c("percent_Marketwt_cull_no1")] = round(sum(ind.plot.cull_no1$estimatedweight)/(sum(ind.plot$estimatedweight) - sum(ind.plot.cull$estimatedweight))*100, digits = 0)
descript.results[i,c("percent_Marketwt_no1")] = round(sum(ind.plot.no1$estimatedweight)/(sum(ind.plot$estimatedweight) - sum(ind.plot.cull$estimatedweight))*100, digits = 0)
descript.results[i,c("percent_Marketwt_no1.18.1_22")] = round(sum(ind.plot.no1.18.1_22$estimatedweight)/(sum(ind.plot$estimatedweight) - sum(ind.plot.cull$estimatedweight))*100, digits = 0)
descript.results[i,c("percent_Marketwt_no1.14.1_18")] = round(sum(ind.plot.no1.14.1_18$estimatedweight)/(sum(ind.plot$estimatedweight) - sum(ind.plot.cull$estimatedweight))*100, digits = 0)
descript.results[i,c("percent_Marketwt_no1.9.5_14")] = round(sum(ind.plot.no1.9.5_14$estimatedweight)/(sum(ind.plot$estimatedweight) - sum(ind.plot.cull$estimatedweight))*100, digits = 0)
descript.results[i,c("percent_Marketwt_no1.5_9.4")] = round(sum(ind.plot.no1.5_9.4$estimatedweight)/(sum(ind.plot$estimatedweight) - sum(ind.plot.cull$estimatedweight))*100, digits = 0)
descript.results[i,c("percent_Marketwt_cull")] = round(sum(ind.plot.cull$estimatedweight)/(sum(ind.plot$estimatedweight) - sum(ind.plot.cull$estimatedweight))*100, digits = 0)
descript.results[i,c("percent_Marketwt_jumbo")] = round(sum(ind.plot.jumbo$estimatedweight)/(sum(ind.plot$estimatedweight) - sum(ind.plot.cull$estimatedweight))*100, digits = 0)
descript.results[i,c("percent_Marketwt_jumbo_22_27")] = round(sum(ind.plot.jumbo.22_27$estimatedweight)/(sum(ind.plot$estimatedweight) - sum(ind.plot.cull$estimatedweight))*100, digits = 0)
descript.results[i,c("percent_Marketwt_jumbo_27more")] = round(sum(ind.plot.jumbo.27more$estimatedweight)/(sum(ind.plot$estimatedweight) - sum(ind.plot.cull$estimatedweight))*100, digits = 0)
## individual plots
## weight percentage of No1 groups to overall No1
descript.results[i,c("percent_no1wt_no1.18.1_22")] = round(sum(ind.plot.no1.18.1_22$estimatedweight)/sum(ind.plot.no1$estimatedweight), digits = 2)
descript.results[i,c("percent_no1wt_no1.14.1_18")] = round(sum(ind.plot.no1.14.1_18$estimatedweight)/sum(ind.plot.no1$estimatedweight), digits = 2)
descript.results[i,c("percent_no1wt_no1.9.5_14")] = round(sum(ind.plot.no1.9.5_14$estimatedweight)/sum(ind.plot.no1$estimatedweight), digits = 2)
descript.results[i,c("percent_no1wt_no1.5_9.4")] = round(sum(ind.plot.no1.5_9.4$estimatedweight)/sum(ind.plot.no1$estimatedweight), digits = 2)
## individual plots
## weight percentage of jumbo groups to overall jumbo
descript.results[i,c("percent_jumbowt_jumbo_22_27")] = round(sum(ind.plot.jumbo.22_27$estimatedweight)/sum(ind.plot.jumbo$estimatedweight), digits = 2)
descript.results[i,c("percent_jumbowt_jumbo_27more")] = round(sum(ind.plot.jumbo.27more$estimatedweight)/sum(ind.plot.jumbo$estimatedweight), digits = 2)
}
# Write spbase-ready output to table and database format plot summary files
outfile <- paste(trial_name, "_database_plot_summaries.csv")
header = as.matrix(t(c("plot_name", "trait", "value", "timestamp", "person", "location", "number")))
write.table(
header,
outfile, sep = ",",
col.names = FALSE,
row.names = FALSE,
quote = TRUE
)
plots <- descript.results$plotname
traits <- colnames(descript.results)
times <- descript.results$timestamp
for (i in 1:nrow(descript.results)) {
for (j in 2:18) {
write.table(
as.matrix(t(c(plots[i], traits[j], descript.results[i,j], times[i], person, "HCR", 1))),
outfile,
append = TRUE,
sep = ",",
col.names = FALSE,
row.names = FALSE,
quote = TRUE
)
}
}
spbase <- descript.results[,c(1:18)]
colnames(spbase)[1] <- "observationunit_name"
write.csv(spbase, paste(trial_name, "_table_plot_summaries.csv", sep=""), row.names = F)
# Write all output to TRIALNAME_complete_plot_summaries file
write.csv(descript.results, paste(trial_name, "_complete_plot_summaries.csv", sep=""), row.names = F)
# colnames(descript.results)[1] <- "observationunit_name"
#
# ordered <- descript.results[order(descript.results$number_no1,decreasing = TRUE),]
# barplot(
#   height = ordered$number_no1,
#   names = ordered$observationunit_name,
#   col= ordered$average_color,
#   title="no1 root count",
#   las=2,
#   cex.lab=0.75
# )
#
# barplot(
#   height = ordered$number_no1,
#   names = ordered$observationunit_name,
#   col= ordered$predominant_color,
#   title="no1 root count",
#   las=2,
#   cex.lab=0.75
# )
#
# dim(descript.results)
#
# hist(descript.results$number_all)
# hist(descript.results$number_canner)
# hist(descript.results$number_no1)
# hist(descript.results$number_jumbo)
# hist(descript.results$number_cull)
# hist(descript.results$percent_Markewt_no1)
View(descript.results)
source("~/Desktop/Exeter_dimensions.R", echo=TRUE)
View(data)
boxplot(length~ accession, data=data[data$accession=PositiveControl],)
boxplot(length~ accession, data=data[data$accession==PositiveControl],)
boxplot(length~ accession, data=data[data$accession=="PositiveControl"],)
View(data)
data[data$accession=="PositiveControl"]
colnames(data)
data[data$accession=="PositiveControl",]
boxplot(length~ accession, data=data[data$accession=="PositiveControl",])
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_violin()
library(ggplot2)
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_violin()
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_boxplot() +
# scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_boxplot() +
# scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
# theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_boxplot() +
# scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
# theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Length in 100ths of an inch") +
xlab("")
par(mfrow=c(2,2))
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_boxplot() +
# scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
# theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Length in 100ths of an inch") +
xlab("")
par(mfrow=c(2,2))
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_boxplot() +
# scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
# theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Length in 100ths of an inch") +
xlab("")
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=width)) +
geom_boxplot() +
# scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
# theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Width in 100ths of an inch") +
xlab("")
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=diameter)) +
geom_boxplot() +
# scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
# theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("diameter in 100ths of an inch") +
xlab("")
View(data)
x
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=weight)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("weight in 10ths of oz") +
xlab("")
View(blockiness_controls)
View(exeter_header)
View(plot_data)
View(blockiness_controls)
View(plot_data)
source("~/Desktop/Exeter_dimensions.R", echo=TRUE)
View(data)
View(data)
source("~/Desktop/Exeter_dimensions.R", echo=TRUE)
source("~/Desktop/Exeter_dimensions.R", echo=TRUE)
source("~/Desktop/Exeter_dimensions.R", echo=TRUE)
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=LD)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("aspectratio") +
xlab("")
par(mfrow=c(2,2))
ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("length in 100ths of an inch") +
xlab("")
devtools::install_github("thomasp85/patchwork")
library(patchwork)
p1 <- ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("length in 100ths of an inch") +
xlab("")
p2 <- ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=diameter)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("diameter in 100ths of an inch") +
xlab("")
p3 <- ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=LD)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("aspectratio") +
xlab("")
p4 <- ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=weight)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("weight in 10ths of oz") +
xlab("")
p1 + p2 + p3 + p4
# build plots
p1 <- ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("length in 100ths of an inch") +
scale_y_continuous(expand = c(0, 0), limits = c(0, NA))
p1 + p2 + p3 + p4
# build plots
p1 <- ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=length)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("length in 100ths of an inch") +
scale_y_continuous(expand = c(0, 0), limits = c(0, NA))
p2 <- ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=diameter)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("diameter in 100ths of an inch") +
scale_y_continuous(expand = c(0, 0), limits = c(0, NA))
p3 <- ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=LD)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("aspectratio * 100") +
scale_y_continuous(expand = c(0, 0), limits = c(0, NA))
p4 <- ggplot(data[data$accession=="PositiveControl",], aes(x=accession, y=weight)) +
geom_boxplot() +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("weight in 10ths of oz") +
scale_y_continuous(expand = c(0, 0), limits = c(0, NA))
p1 + p2 + p3 + p4
positiveControl <- data[data$accession=="PositiveControl",]
mean(positiveControl$weight)
median(positiveControl$weight)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# install.packages("magick")
library(magick)
# Chunk 2
setwd("~/projects/RScripts/Blockiness")
exeter_header <- read.csv("exeter_header.csv", header = FALSE, check.names = TRUE,  stringsAsFactors = FALSE)
blockiness_controls <- read.csv("blockiness_controls.csv", header = FALSE, check.names = TRUE,  stringsAsFactors = FALSE)
colnames(blockiness_controls) <- head(exeter_header, 1)
plot_data <- read.csv("2020allrootsv2.csv", header = TRUE, check.names = TRUE,  stringsAsFactors = FALSE)
common_cols <- intersect(colnames(blockiness_controls), colnames(plot_data))
data <- rbind(
blockiness_controls[common_cols],
plot_data[common_cols]
)
identifiers <- strcapture(
"(^[^_]+)_([^_]+)_([^_]+)_(.*)",
as.character(data$plot_name),
data.frame(trial = character(), plotnum = character(), rep = character(), accession = character())
)
data <- cbind(identifiers, data)
# Chunk 3
# convert hundreths of inch to cm and 10ths of ounces to grams
data$diametercm <- as.numeric(data$diameter) * 0.0254 # cm per 1/100 inch
data$lengthcm <- as.numeric(data$length) * 0.0254 # cm per 1/100 inch
data$weightg <- as.numeric(data$weight) * 2.8349523 # g per 1/10 ounce
# calculate max cylindrical volume in cubic cenimeters
data$max.volumecc <- pi * (as.numeric(data$diametercm)/2)^2 * as.numeric(data$lengthcm)  # cyclindrical volume = pi*r2*h
# Exeter estimates a density of 0.93 g per cm3
# calculate blockiness as ratio of estimated volume (weight in grams / 0.93 g per cm3)  to maximum theoretical volume
# 1 = perfectly blockly (all of possible cylindrical volume filled), 0 = infinitely not blocky (none of possible cylindrical volume filled)
blockiness <- (data$weightg / 0.93) / data$max.volumecc
data <- cbind(blockiness, data)
# Chunk 4
example <- image_read('blocky_positive_control_NIR_V1_O0001.tif')
example <-image_crop(example, "400x480+25+200")
extra <- image_crop(example, "100x600+300+0")
joined <- c(example,extra,extra,extra)
expanded <- image_append(joined)
expanded <- image_draw(expanded)
segments(x0 = 130, y0 = 40, x1 = 130, y1 = 425, col="green")
segments(x0 = 60, y0 = 250, x1 = 200, y1 = 250, col="green")
text(125, 30, "Length = 14.9cm", family = "monospace", cex = 1, col="green")
text(65, 240, "Diameter = 6.0cm", family = "monospace", cex = 1, col="green")
text(125, 450, "Est. Weight = 380g", family = "monospace", cex = 1, col="green")
text(450, 75, "If an ideally blocky root is a perfect cylinder, then a blockiness score (B) can be
calculated as the ratio of actual volume (V) to potential cylindrical volume (pi * r^2 * h)", family = "monospace", cex = 1, col="white")
text(450, 125, expression(B == V %/% (pi~'*'~'r^2'~'*'~h)), cex=2, col="green")
text(450, 175, "The density of a sweetpotato is nearly the same as water, or 1 g/cm3.
So weight in grams is a good approximation of volume in cm3", family = "monospace", cex = 1, col="white")
text(450, 225, expression(B == '380cm3' %/% (pi~'*'~'r^2'~'*'~h)), cex=2, col="green")
text(450, 275, "The Exeter grader produces an estimated length and diameter, which can be
converted to cm. Root length in cm is equivalent to cylinder height (h),
and 1/2 of the diameter is equivalent to cylinder radius (r)", family = "monospace", cex = 1, col="white")
text(450, 325, expression(B == '380cm3' %/% (pi~'*'~'(3cm)^2'~'*'~'14.9cm')), cex=2, col="green")
text(450, 375, "Finally, solving for B gives a 'Blockiness' score between 1 and 0", family = "monospace", cex = 1, col="white")
text(450, 425, expression({B ==  '380cm3' %/% '421cm3'} == '0.90'), cex=2, col="green")
dev.off()
# Chunk 5
# Remove canners and culls by keeping only roots with diam >= 200 and length >= 299 and weight >=50
No1s_and_Jumbos <- data[data$trial == "21BLOK0002HCR" | (data$diameter >= 200 & data$length >= 300 & data$weight >= 50),]
# Set No1s as remaining roots with diam <= 350 and length <= 900 and weight <=220
No1s <- No1s_and_Jumbos[No1s_and_Jumbos$trial == "21BLOK0002HCR" | (No1s_and_Jumbos$diameter <= 350 & No1s_and_Jumbos$length <= 900 & No1s_and_Jumbos$weight <= 220),]
# Set Jumbos as remaining roots with diam > 350 or length > 900 or weight > 220
Jumbos <- No1s_and_Jumbos[No1s_and_Jumbos$trial == "21BLOK0002HCR" | (No1s_and_Jumbos$diameter > 350 | No1s_and_Jumbos$length > 900 | No1s_and_Jumbos$weight > 220),]
# Chunk 6
average_colors <- function(indiv_colors) {
print(indiv_colors)
reds<- substr(indiv_colors, 1, 2)
greens<- substr(indiv_colors, 3, 4)
blues<- substr(indiv_colors, 5, 6)
rsquared <- strtoi(reds, base=16)^2
gsquared <- strtoi(greens, base=16)^2
bsquared <- strtoi(blues, base=16)^2
return(
rgb(
round(sqrt(mean(rsquared))),
round(sqrt(mean(gsquared))),
round(sqrt(mean(bsquared))),
maxColorValue=255
)
)
}
# Adjust plot size to fit vertical x labels
par(mar=c(10,5,4,2))
# Create trial specific title and retrieve subset of data from trial of interest
trialname <- "20FFMC0040HCRN11"
title <- paste(trialname, "No1 and Jumbo Blockiness", sep=" ")
FFMC <- No1s_and_Jumbos[No1s_and_Jumbos$trial == "21BLOK0002HCR" | No1s_and_Jumbos$trial == "20FFMC0040HCRN11",]
# Order accession by mean blockiness and calculate avg skin color
FFMC$accession <- with(FFMC, reorder(accession , -blockiness, median , na.rm=T))
plot_colors <- tapply(as.hexmode(substr(FFMC$colorhex1, 2, nchar(FFMC$colorhex1))), FFMC$accession, average_colors)
# Create plot and add repositioned X axis title
b <- boxplot(blockiness ~ accession, data=FFMC, main=title, ylab=expression(bold("Blockiness")), las=2, col=plot_colors, xaxt="n", xlab="")
title(xlab= "Accession", line=6, cex.lab=1, family="Calibri Light", adj=0.45, font.lab = 2)
# Add sample sizes and tilted x-axis labels
text(seq_along(na.omit(unique(FFMC$accession))), b$stats[3,] + 0.012, paste("n=", b$n))
text(unique(FFMC$accession), par("usr")[3] - .05, labels = unique(FFMC$accession), srt = 45, adj = 1, xpd = TRUE);
# Chunk 7
pc <- image_read('blocky_positive_control_RGB_V1_O0001.tif')
pc <-image_crop(pc, "300x500+50+200")
pc <-image_scale(pc, 150)
pc <- image_draw(pc)
rect(17, 23, 90, 210, border = "green", lty = "dashed", lwd = 2)
text(60, 235, "B = 0.90", family = "monospace", cex = 1, col="green")
nc <- image_read('blocky_negative_control_RGB_V1_O0002.tif')
nc <-image_crop(nc, "300x500+50+25")
nc <-image_scale(nc, 150)
nc <- image_draw(nc)
rect(25, 37, 97, 197, border = "green", lty = "dashed", lwd = 2)
text(60, 230, "B = 0.13", family = "monospace", cex = 1, col="green")
BB1 <- image_read('plot_data/Bbelle-05/Images/Bbelle-05_single_RGB_V1_O0253.tif')
BB1 <-image_crop(BB1, "300x500+15+0")
BB1 <-image_scale(BB1, 150)
BB1 <- image_draw(BB1)
rect(11, 5, 112, 184, border = "green", lty = "dashed", lwd = 2)
text(60, 230, "B = 0.77", family = "monospace", cex = 1, col="green")
BB2 <- image_read('plot_data/Bbelle-06/Images/Bbelle-06_single_RGB_V1_O0228.tif')
BB2 <-image_crop(BB2, "300x500+50+25")
BB2 <-image_scale(BB2, 150)
BB2 <- image_draw(BB2)
rect(30, 10, 105, 235, border = "green", lty = "dashed", lwd = 2)
text(60, 230, "B = 0.23", family = "monospace", cex = 1, col="green")
BB3 <- image_read('plot_data/Bbelle-07/Images/Bbelle-07_single_RGB_V1_O0231.tif')
BB3 <-image_crop(BB3, "300x500+60+125")
BB3 <-image_scale(BB3, 150)
BB3 <- image_draw(BB3)
rect(12, 12, 90, 225, border = "green", lty = "dashed", lwd = 2)
text(60, 240, "B = 0.61", family = "monospace", cex = 1, col="green")
all <- c(pc,BB1,BB3,BB2,nc)
all_images <- image_append(all)
all_images
source("~/Desktop/Exeter_dimensions.R", echo=TRUE)
dev.off()
p1 + p2 + p3 + p4
dev.off()
p1 + p2 + p3 + p4
